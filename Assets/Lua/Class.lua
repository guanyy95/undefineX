---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by GUAN.
--- DateTime: 2023/7/18 23:36
---
local _allClass = {}

local function size(tb)
    local index = 0
    for _, _ in pairs(tb) do
        index = index + 1
    end
    return index
end

function Class(className, inherit)
    local class_type = {  ctor = nil,  className = className, inherit = inherit}
    local class_type_space = {}
    _allClass[class_type] = class_type_space

    if inherit then
        setmetatable(class_type_space, {
            __index = function(tb, k)
                if k and _allClass[inherit] then
                    local ret = _allClass[inherit][k]
                    class_type_space[k] = ret
                    return ret
                else
                    return nil
                end
            end,
        })
    end
    
    setmetatable(class_type, {
        __newindex = function(tb, k, v) class_type_space[k] = v end,
        __index = function(tb, k) return class_type_space[k] end,
        __call = function(...) 
            local obj = { class = class_type, inherit = inherit }
            setmetatable(obj, {
                __index = function(tb, k)
                    return _allClass[class_type[k]] 
                end
            })
            if class_type.ctor then
                class_type.ctor(obj, ...)
            end
        end,
    })
    
    return class_type
end

function Interface(class_type, ...) 
    local class_type_space = _allClass[class_type]
    for _, port in ipairs({...}) do
        for k, v in pairs(port) do
            class_type_space[k] = v
        end
    end
end